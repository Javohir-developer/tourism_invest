<?php
/**
 *  @author Jakhar <oks@gmail.com>
 *  @company OKS Technologies <info@oks.uz>
 *  @package YoshlarTV
 */

namespace common\modules\menu\models;


use Yii;
use yii\caching\TagDependency;
use \yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\behaviors\SluggableBehavior;
//Системные
use oks\core\behaviors\DateTimeBehavior;
use oks\core\behaviors\UserBehavior;
//Файлы
use oks\filemanager\behaviors\FileModelBehavior;
use oks\filemanager\models\Files;
//Языки
use oks\langs\models\Langs;
use oks\langs\components\ModelBehavior;

use oks\core\behaviors\SlugBehavior;
/**
 * This is the model class for table "menu".
 *
 * @property int $menu_id Идентификатор
 * @property string $title Название
 * @property int $type Тип
 * @property int $alias Тип
 * @property string $lang_hash Хеш языка
 * @property int $lang Язык
 *
 * @property Langs $lang0
 * @property MenuItems[] $menuItems
 */
class Menu extends \yii\db\ActiveRecord
{
    const DESCRIPTION = "Меню";
    const PERMESSION_ACCESS = "permession_menu";
    const ROLE = "manager";
    const ROLE_PARENT = "admin";

    const SCENARIO_SEARCH = "search";
    const STATUS_ACTIVE = 1;

    private $_categoriesform;
    private $_tagsform;
    private $_topicsform;


    /**
     * @return array
     */
    public function behaviors()
        {
        return ArrayHelper::merge(parent::behaviors(),[
            'lang' => [
                'class' => ModelBehavior::className(),
                'fill' => [
                    'alias' => '',
                ],
            ],
            'slug' => [
                'class' => SlugBehavior::className(),
                'attribute' => 'alias',
                'attribute_title'=> 'title',
            ],
        /*    'permession_access' => [
                'class' => \common\behaviors\AccessBehavior::className(),
                'role' => self::ROLE,
                'parent_role' => self::ROLE_PARENT,
                'permession_name' => self::PERMESSION_ACCESS,
                'permession_description' => self::DESCRIPTION
            ],*/
        ]); // TODO: Change the autogenerated stub

    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'menu';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['type', 'lang'], 'default', 'value' => null],
            [['type', 'lang'], 'integer'],
            [['alias'],'safe'],
            [['title', 'lang_hash','alias'], 'string', 'max' => 255],
            [['lang'], 'exist', 'skipOnError' => true, 'targetClass' => Langs::className(), 'targetAttribute' => ['lang' => 'lang_id']],
        ];
    }

    /**
     * @return array
     */
    public function transactions()
    {
        return [
            self::SCENARIO_DEFAULT => self::OP_ALL
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'menu_id' => __('Menu ID'),
            'title' => __('Title'),
            'type' => __('Type')
        ];
    }

    /**
     * @return mixed
     */
    public function getCategoriesform(){
        return $this->_categoriesform;
    }

    /**
     * @param $value
     * @return mixed
     */
    public function setCategoriesform($value){
        return $this->_categoriesform = $value;
    }

    /**
     * @return mixed
     */
    public function getTagsform(){
        return $this->_tagsform;
    }

    /**
     * @param $value
     * @return mixed
     */
    public function setTagsform($value){
        return $this->_tagsform = $value;
    }

    /**
     * @return mixed
     */
    public function getTopicsform(){
        return $this->_topicsform;
    }

    /**
     * @param $value
     * @return mixed
     */
    public function setTopicsform($value){
        return $this->_topicsform = $value;
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLang()
    {
        return $this->hasOne(Langs::className(), ['lang_id' => 'lang'])->inverseOf('menus');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMenuItems()
    {
        return $this->hasMany(MenuItems::className(), ['menu_id' => 'menu_id'])->inverseOf('menu');
    }

    /**
     * @return $this
     */
    public function getMenuItemsParents()
    {
        return $this->hasMany(MenuItems::className(), ['menu_id' => 'menu_id'])->onCondition(['menu_items.menu_item_parent_id' => NULL])->orderBy(['sort' => SORT_ASC])->inverseOf('menu');
    }

    /**
     * @inheritdoc
     * @return MenuQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new MenuQuery(get_called_class());
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        TagDependency::invalidate(Yii::$app->cache,['menu']);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function afterDelete()
    {
        TagDependency::invalidate(Yii::$app->cache,['menu']);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $menu_alias
     * @return mixed
     */
    public static function cacheHttpTag($menu_alias = ""){
        $mneu = self::find()->alias($menu_alias);
        return MenuItems::find()->andWhere(['menu_id' => $mneu->menu_id])->orderBy(['sort' => SORT_DESC])->one()->{MenuItems::primaryKey()[0]};
    }


}
